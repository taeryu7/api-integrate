API 연동

API 를 호출하기 위해서 axios 라는 라이브러리를 설치해야한다.
yarn add axios

axios를 사용해서 GET, PUT, POST, DELETE 등의 메서드로 API 요청을 할 수 있다.
↓메서드들에 대하여 잘 모르시는 경우에는 REST API 에 대한 글을 한번 읽어볼것.
https://meetup.nhncloud.com/posts/92

REST API 를 사용 할 때에는 하고 싶은 작업에 따라 다른 메서드로 요청을 할 수 있는데 메서드들은 다음 의미를 가지고 있다.
GET: 데이터 조회
POST: 데이터 등록
PUT: 데이터 수정
DELETE: 데이터 제거
이 메서드 외에도 PATCH, HEAD 와 같은 메서드들도 있다.

axios 의 사용법
import axios from 'axios';
axios.get('/users/1');

get 이 위치한 자리에는 메서드 이름을 소문자로 넣는다. 예를 들어서 새로운 데이터를 등록하고 싶다면 axios.post() 를 사용하면된다.
파라미터에는 API 의 주소를 넣는다.
axios.post('/users', {
  username: 'blabla',
  name: 'blabla'
});

↓ 이번에 API 연동연습을 할 연습용 API 주소다.
https://jsonplaceholder.typicode.com/users
결과물은 다음과 같은 형식으로 이루어져있다.
[
  {
    "id": 1,
    "name": "Leanne Graham",
    "username": "Bret",
    "email": "Sincere@april.biz",
    "address": {
      "street": "Kulas Light",
      "suite": "Apt. 556",
      "city": "Gwenborough",
      "zipcode": "92998-3874",
      "geo": {
        "lat": "-37.3159",
        "lng": "81.1496"
      }
    },
    "phone": "1-770-736-8031 x56442",
    "website": "hildegard.org",
    "company": {
      "name": "Romaguera-Crona",
      "catchPhrase": "Multi-layered client-server neural-net",
      "bs": "harness real-time e-markets"
    }
  },
  {
    "id": 2,
    "name": "Ervin Howell",
    "username": "Antonette",
    "email": "Shanna@melissa.tv",
    "address": {
      "street": "Victor Plains",
      "suite": "Suite 879",
      "city": "Wisokyburgh",
      "zipcode": "90566-7771",
      "geo": {
        "lat": "-43.9509",
        "lng": "-34.4618"
      }
    },
    "phone": "010-692-6593 x09125",
    "website": "anastasia.net",
    "company": {
      "name": "Deckow-Crist",
      "catchPhrase": "Proactive didactic contingency",
      "bs": "synergize scalable supply-chains"
    }
  },
  (...)
]



react-async 로 요청 상태 관리
↓react-async 는 useAsync 와 비슷한 함수가 들어있는 라이브러리다.
https://github.com/async-library/react-async

이 라이브러리 안에 들어있는 함수 이름도 useAsync 인데, 사용법이 조금 다르다.
매번 프로젝트를 만들 때 마다 직접 요청 상태 관리를 위한 커스텀 Hook 을 만들기 귀찮다면, 이 라이브러리를 사용면된다.
기능들이 많이 내장되어 있지만 사용법이 조금 다르다.
기존에 만든 커스텀 Hook은 결과물을 배열로 반환하는 반면 이 Hook은 객체형태로 반환한다.
$ yarn add react-async

↓react-async 의 README 에 있는 공식 사용법이다.
import { useAsync } from "react-async"

const loadCustomer = async ({ customerId }, { signal }) => {
  const res = await fetch(`/api/customers/${customerId}`, { signal })
  if (!res.ok) throw new Error(res)
  return res.json()
}

const MyComponent = () => {
  const { data, error, isLoading } = useAsync({ promiseFn: loadCustomer, customerId: 1 })
  if (isLoading) return "Loading..."
  if (error) return `Something went wrong: ${error.message}`
  if (data)
    return (
      <div>
        <strong>Loaded some data:</strong>
        <pre>{JSON.stringify(data, null, 2)}</pre>
      </div>
    )
  return null
}
react-async 의 useAsync 를 사용 할 때 파라미터로 넣는 옵션 객체에는 호출 할 함수 promiseFn 을 넣고,
파라미터도 필드 이름과 함께 (customerId) 넣어주어야한다.

react-async 라이브러리는 정말 쓸만하고, 편하다. 하지만 전에 만든 useAsyncdhk 크게 다를게 없다.
어떤 부분에서는 직접만든 Hook이 더 편하기도 하다. 예를 들어 Hook의 옵션이 더 간단하다.
또한 watch 대신 deps를 사용하기도하고, 반환값이 배열 형태이기 때문에 더욱 간단하다. (리액트 자체 내장 Hook 과 사용성이 비슷하다는 측면)

react-async 의 useAsync 는 옵션이 다양하고 (promiseFn, deferFn, watch, ...) 
결과 값도 객체 안에 다양한 값이 들어있어서 (run, reload, ...) 헷갈릴 수 있는 단점이 있긴 하지만 다양한 기능이 이미 내장되어있고
Hook 을 직접 만들 필요 없이 바로 불러와서 사용 할 수 있는 측면에서는 정말 편하다.

Hook을 직접 만들어 써야하는지 라이브러리를 통해서 불러와서 사용하는것에 대한 정답은 없다.

useAsync의 작동방식을 완벽히 이해했다면 필요에 따라 커스터마이징해가면서 사용이 가능하니 직접 사용하는것이 더 나을것같다.

연습용 프로젝트가 아닌 오랫동안 사용하면서 유지보수를 해야하는 프로젝트일수록 더 중요한것같다.

작은 프로젝트거나 직접 만든 useAsync의 작동방식이 어려우니 일단은 라이브러리를 설치해서 사용해야겠다.


대부분의 애플리케이션에서는 API 를 연동해서 개발을 하게 될 때 큰 어려움 없이 진행 할 수 있다.
API 연동을 하게 될 때, Redux 또는 MobX 와 같은 상태 관리 라이브러리를 함께 사용하기도 하는데, 
해당 라이브러리들을 사용했을 때의 이점은 (Redux의 경우) 조금 더 체계적으로 비동기 관련 액션들을 관리 할 수 있고, 
redux-saga 와 redux-observable 같은 미들웨어 라이브러리들을 사용하여 복잡한 비동기 작업을 조금 더 편하게 처리 할 수 있다.

서버사이드 렌더링을 구현하게 될 시 서버에서 들고 있는 데이터를 쉽게 보존하여 그대로 브라우저에게 전달 하게 되는 과정이 훨씬 쉬워지기도한다.

